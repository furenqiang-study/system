<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.0</version>
        <relativePath /> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.furenqiang</groupId>
    <artifactId>system</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>system</name>
    <description>study project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- 其他依赖添加到下面 -->

        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!-- mybatis 弃用，改为mybatis-plus-->
        <!--<dependency>-->
            <!--<groupId>org.mybatis.spring.boot</groupId>-->
            <!--<artifactId>mybatis-spring-boot-starter</artifactId>-->
            <!--<version>2.0.0</version>-->
        <!--</dependency>-->

        <!-- mybatis-plus -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.0.5</version>
        </dependency>

        <!--热部署 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!-- 日志依赖log-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>

        <!-- swagger -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.2</version>
        </dependency>

        <!-- security整体依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- 分页查询依赖 -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.12</version>
        </dependency>

        <!-- alibaba的fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.73</version>
        </dependency>

        <!-- eureka注册依赖 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-eureka</artifactId>
            <version>1.4.3.RELEASE</version>
        </dependency>

        <!-- aop依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>

        <!-- 引入 Apache commons-io 包，方便操作文件-->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.6</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <version>1.18</version>
        </dependency>

        <!--文件上传 -->
        <dependency>
            <groupId>commons-net</groupId>
            <artifactId>commons-net</artifactId>
            <version>3.6</version>
        </dependency>

        <!--断点续传依赖-->
        <dependency>
            <groupId>cn.novelweb</groupId>
            <artifactId>tool-core</artifactId>
            <version>1.3.3</version>
        </dependency>

        <!--集成logstash,直接将日志输出到logstash时使用-->
        <!--<dependency>-->
            <!--<groupId>net.logstash.logback</groupId>-->
            <!--<artifactId>logstash-logback-encoder</artifactId>-->
            <!--<version>5.3</version>-->
        <!--</dependency>-->

        <!--使用@Slf4j注解时要引入-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!--xml格式结果返回-->
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
        </dependency>

        <!--thymeleaf-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!--netty-->
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
            <version>4.1.73.Final</version>
        </dependency>

        <!--easypoi,excel导出-->
        <dependency>
            <groupId>cn.afterturn</groupId>
            <artifactId>easypoi-base</artifactId>
            <version>4.2.0</version>
        </dependency>

        <!--spring-retry异常自动重试业务请求-->
        <dependency>
            <groupId>org.springframework.retry</groupId>
            <artifactId>spring-retry</artifactId>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>2020.0.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!--<configuration>-->
                <!--<mainClass>com.furenqiang.system.SystemApplication</mainClass>-->
                <!--<executable>true</executable>-->
                <!--<includeSystemScope>true</includeSystemScope>-->
                <!--</configuration>-->
            </plugin>

            <!--在这里修改版本-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.4.3</version>
            </plugin>
            <!---->

            <!--加密插件-->
            <!--&lt;!&ndash;-->
            <!--[1] 加密后，方法体被清空，保留方法参数、注解等信息;是为了兼容spring，swagger等扫描注解的框架.-->
            <!--[2] 方法体被清空后，反编译者只能看到方法名和注解，看不到方法的具体内容;-->
            <!--[3] 加密后的项目需要设置javaagent来启动，启动过程中解密cLasS，完全内存解密，不留下任何解密后的文件。-->
            <!--[启动加密的Jar]: 生成 xxx-encrypted.jar，这个就是加密后的jar文件;加密后的文件不可直接执行-->
            <!--无密码: 需要java -javaagent:xxx-encrypted.jar -jar xxx-encrypted.jar-->
            <!--有密码:java -javaagent:xxx-encrypted.jar='-pwd 0000000' -jar xxx-encrypted.jar&ndash;&gt;-->
            <!--<plugin>-->
            <!--<groupId>net.roseboy</groupId>-->
            <!--<artifactId>classfinal-maven-plugin</artifactId>-->
            <!--<version>1.2.1</version>-->
            <!--<configuration>-->
            <!--<password>#</password>&lt;!&ndash;加密密码，如果是#号，则使用无密码模式加密&ndash;&gt;-->
            <!--<packages>com.furenqiang.system</packages>&lt;!&ndash;加密的包名(可为空,多个用","分割)&ndash;&gt;-->
            <!--<cfgfiles>application.properties</cfgfiles>&lt;!&ndash;需要加密的配置文件，般是classes目录下的ym或properties文件(可为空，多个用"，"分割)&ndash;&gt;-->
            <!--<libjars></libjars>&lt;!&ndash;jar包lib下要加密jar文件名(可为空，多个用”,"分割)&ndash;&gt;-->
            <!--</configuration>-->
            <!--<executions>-->
            <!--<execution>-->
            <!--<phase>package</phase>-->
            <!--<goals>-->
            <!--<goal>classFinal</goal>-->
            <!--</goals>-->
            <!--</execution>-->
            <!--</executions>-->
            <!--</plugin>-->

            <!--docker插件-->
            <!--<plugin>-->
            <!--<groupId>com.spotify</groupId>-->
            <!--<artifactId>docker-maven-plugin</artifactId>-->
            <!--<version>1.0.0</version>-->
            <!--<configuration>-->
            <!--&lt;!&ndash;指定了生成的 Docker 镜像的名称，这里是"yun-server"&ndash;&gt;-->
            <!--<imageName>system</imageName>-->
            <!--&lt;!&ndash;指定了 Dockerfile 的位置，它位于项目的主目录下的“src/main/docker”目录中&ndash;&gt;-->
            <!--<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>-->
            <!--<resources>-->
            <!--<resource>-->
            <!--&lt;!&ndash;指定了资源在 Docker 镜像中的目标路径，这里是根目录 ("/")&ndash;&gt;-->
            <!--<targetPath>/</targetPath>-->
            <!--&lt;!&ndash;元素指定了资源所在的目录，这里是构建目录&ndash;&gt;-->
            <!--<directory>${project.build.directory}</directory>-->
            <!--&lt;!&ndash;指定了要包含在镜像中的资源文件，这里是构建输出的最终名称&ndash;&gt;-->
            <!--<include>${project.build.finalName}.jar</include>-->
            <!--</resource>-->
            <!--</resources>-->
            <!--</configuration>-->
            <!--</plugin>-->
        </plugins>
    </build>

</project>
